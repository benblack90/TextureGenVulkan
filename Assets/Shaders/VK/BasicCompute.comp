//GLSL version to use
#version 460

//size of a workgroup for compute
layout (local_size_x = 16, local_size_y = 16) in;

//descriptor bindings for the pipeline
layout(rgba8,set = 0, binding = 0) uniform image2D image;


const float PI = 3.14159265359;

layout(set = 0, binding = 2) buffer permutations
{
    int[1024] perms;
};

vec2 GetConstVec(int x)
{
  //biasing the noise to be horizontal  
  
    int hash = x % 6;
    if(hash == 0) return vec2(0.0, 1.4142);
    if(hash == 1) return vec2 (0.0, -1.4142);    
    if(hash == 2) return vec2(0.2455732529,1.392715124);
    if(hash == 3) return vec2(-0.2455732529, 1.392715124);
    if(hash == 4) return vec2(0.2455732529, -1.392715124);
    if(hash == 5) return vec2(-0.2455732529, -1.392715124);
    
    /*
    int hash = x & 1;
    if(hash == 0) return vec2(0.0, 1.0);
    else return vec2 (0.0, -1.0);  
    */
    /*
    int hash = x % 3;
    if (hash == 0) return vec2(-1.0,-1.0);
    if (hash == 1) return vec2(1.0,1.0);
    if (hash == 2) return vec2(1.0,-1.0);
    else return vec2(-1.0,1.0);
    */
}

float Ease(float val)
{
    return val * val * val * (val * (val * 6.0f - 15.0f) + 10.0f); 
}

float Perlin2d(float xx, float yy)
{
    
    int x = int(xx) & 511;
    int y = int(yy) & 511;
    float freqX = xx - int(xx);
    float freqY = yy - int(yy);  

    vec2 bottomLeft = vec2(freqX, freqY);
    vec2 bottomRight = vec2(freqX - 1.0f, freqY);
    vec2 topLeft = vec2(freqX, freqY - 1.0f);
    vec2 topRight = vec2(freqX - 1.0f, freqY - 1.0f);

    int cvBottomLeft = perms[perms[x] + y];
    int cvBottomRight = perms[perms[x + 1] + y];
    int cvTopLeft = perms[perms[x] + y + 1];
    int cvTopRight = perms[perms[x + 1] + y + 1];

    float dotBotL = dot(bottomLeft, GetConstVec(cvBottomLeft));
    float dotBotR = dot(bottomRight, GetConstVec(cvBottomRight));
    float dotTopL = dot(topLeft, GetConstVec(cvTopLeft));
    float dotTopR = dot(topRight, GetConstVec(cvTopRight));
        
    float u = Ease(freqX);
    float v = Ease(freqY);
    return (mix(    mix(dotBotL, dotTopL, v),  mix(dotBotR, dotTopR, v), u));

}

float fracBrownMotion(vec2 coords)
{
    int octaves = 8;
    float result = 0.0f;
    float gain = 0.5f;
    float freq = 1.0f;
    float amplitude = 1.0f;

    for(int i = 0; i < octaves; i++)
    {
        result += amplitude * (Perlin2d(coords.x * freq, coords.y * freq));
        freq *= 2.0f;
        amplitude *= gain;
    } 
    return (result + 1) / 2;
}

float domainWarp(vec2 coords, float warpFactor, out vec2 warp1, out vec2 warp2)
{
    //return fracBrownMotion(coords);
    //the numbers to offset the brownian motion calls are arbitrary - we could use basically anything reasonably small (i.e. under 100 or so)
    vec2 posWarp = vec2(fracBrownMotion(coords + vec2(1.6, 7.4)), fracBrownMotion(coords));
    warp1 = vec2(fracBrownMotion(coords + vec2(1.6, 7.4)), fracBrownMotion(coords));
    warp2 = vec2(fracBrownMotion(coords + warpFactor * warp1 + vec2(14.4,7.9)), fracBrownMotion(coords));
   
    return fracBrownMotion(coords + warp2 * warpFactor);
}

mat2 rotMat(float amt){
    return mat2(cos(amt),-sin(amt),
                sin(amt),cos(amt));
}

float lines(in vec2 pos, float b){
    float scale = 1.0f;
    pos *= scale;
    return smoothstep(0.0f,0.5f + b * 0.5f, abs((sin(pos.y * PI) + b * 2.0f)) * 0.5f);
}

void main() 
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 coordF = texelCoord;
    coordF.y *= 0.0025;
    coordF.x *= 0.00075;
	ivec2 size = imageSize(image);
    
    //storage for our domain warps, so we can use them later for colouring
    vec2 warp1; vec2 warp2;
    float warp3 = domainWarp(coordF,2.5, warp1, warp2);    
    vec3 bass = vec3(0.369, 0.082, 0.0082);
    vec3 superBass = bass * bass;
    vec3 midYel = vec3(0.878, 0.729, 0.463);
    vec3 midRed = vec3(0.722, 0.435, 0.235);
    vec3 mixBases = mix(bass, superBass,length(warp2));
    vec3 colourMix1 = mix(mixBases, midYel, length(warp2));
    vec3 colourMix2 = mix(mixBases, midRed, warp3);
    

    vec4 colour = vec4(mix(colourMix2, colourMix1,warp3),1);


    imageStore(image, texelCoord, colour);
}