//GLSL version to use
#version 460

//size of a workgroup for compute
layout (local_size_x = 16, local_size_y = 16) in;

//descriptor bindings for the pipeline
layout(rgba8,set = 0, binding = 0) uniform image2D image;

layout(push_constant) uniform sinTime
{
	vec3 positionOffset;
};

const float PI = 3.14159265359;

layout(set = 0, binding = 2) buffer permutations
{
    int[1024] perms;
};

vec2 GetConstVec(int x)
{
  //biasing the noise to be horizontal  
  
    int hash = x % 6;
    if(hash == 0) return vec2(0.0, 1.4142);
    if(hash == 1) return vec2 (0.0, -1.4142);    
    if(hash == 2) return vec2(0.2455732529,1.392715124);
    if(hash == 3) return vec2(-0.2455732529, 1.392715124);
    if(hash == 4) return vec2(0.2455732529, -1.392715124);
    if(hash == 5) return vec2(-0.2455732529, -1.392715124);
    
    /*
    int hash = x & 1;
    if(hash == 0) return vec2(0.0, 1.0);
    else return vec2 (0.0, -1.0);  
    */
    /*
    int hash = x % 3;
    if (hash == 0) return vec2(-1.0,-1.0);
    if (hash == 1) return vec2(1.0,1.0);
    if (hash == 2) return vec2(1.0,-1.0);
    else return vec2(-1.0,1.0);
    */
}

float Ease(float val)
{
    return val * val * val * (val * (val * 6.0f - 15.0f) + 10.0f); 
}

float Perlin2d(float xx, float yy)
{
    
    int x = int(xx) & 511;
    int y = int(yy) & 511;
    float freqX = xx - int(xx);
    float freqY = yy - int(yy);  

    vec2 bottomLeft = vec2(freqX, freqY);
    vec2 bottomRight = vec2(freqX - 1.0f, freqY);
    vec2 topLeft = vec2(freqX, freqY - 1.0f);
    vec2 topRight = vec2(freqX - 1.0f, freqY - 1.0f);

    int cvBottomLeft = perms[perms[x] + y];
    int cvBottomRight = perms[perms[x + 1] + y];
    int cvTopLeft = perms[perms[x] + y + 1];
    int cvTopRight = perms[perms[x + 1] + y + 1];

    float dotBotL = dot(bottomLeft, GetConstVec(cvBottomLeft));
    float dotBotR = dot(bottomRight, GetConstVec(cvBottomRight));
    float dotTopL = dot(topLeft, GetConstVec(cvTopLeft));
    float dotTopR = dot(topRight, GetConstVec(cvTopRight));
        
    float u = Ease(freqX);
    float v = Ease(freqY);
    return (mix(    mix(dotBotL, dotTopL, v),  mix(dotBotR, dotTopR, v), u));

}

float fracBrownMotion(vec2 coords, int octaves)
{
    float result = 0.0f;
    float gain = 0.5f;
    float freq = 1.0f;
    float amplitude = 1.0f;

    for(int i = 0; i < octaves; i++)
    {
        result += amplitude * (Perlin2d(coords.x * freq, coords.y * freq));
        freq *= 2.0f;
        amplitude *= gain;
    } 
    return (result + 1) / 2;
}

void main() 
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 coordF = texelCoord;
    float freq = 0.01;
    coordF *= freq;
	ivec2 size = imageSize(image);

    float warping = fracBrownMotion(coordF * 0.65, 6);
    float warpingOff = fracBrownMotion(vec2(coordF.x * 0.75 + positionOffset.x * 0.03,coordF.y * 0.75), 6);
    float warpingOff2 = fracBrownMotion(vec2(coordF.x * 0.75 + positionOffset.x * 0.1,coordF.y * 0.75), 6);
    float colour1 = fracBrownMotion(vec2(warping, coordF.y + warping),4);
    float colour2 = fracBrownMotion(vec2(warpingOff2, abs(coordF.y - warping)),4);
    float bassDetail = fracBrownMotion(vec2(warpingOff, coordF.y + warping),6);
    vec3 bass = vec3(0.369, 0.082, 0.0082);
    vec3 superBass = bass * bass;
    vec3 yel = vec3(0.741, 0.643, 0.435);
    vec3 orng = vec3(0.639, 0.286, 0.137);
   
   vec3  col = mix(orng, bass, smoothstep(0.0,1.0,colour1));
   col = mix(col, yel, smoothstep(0.3,1.0,colour2));
   col = mix(superBass, col, smoothstep(0.0,0.35,bassDetail));
   
   vec4 colour = vec4(col,1);
    
   imageStore(image, texelCoord, colour);
}