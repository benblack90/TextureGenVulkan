//GLSL version to use
#version 460

//size of a workgroup for compute
layout (local_size_x = 16, local_size_y = 16) in;

//descriptor bindings for the pipeline
layout(rgba8,set = 0, binding = 0) uniform image2D image;

layout(set = 0, binding = 2) buffer permutations
{
    int[1024] perms;
};

vec2 GetConstVec(int x)
{
  //biasing the noise to be horizontal  
    int hash = x & 1;
    if(hash == 0) return vec2(0.0, 1.0);
    else return vec2 (0.0, -1.0);    
}

float Ease(float val)
{
    return val * val * val * (val * (val * 6.0f - 15.0f) + 10.0f); 
}

float Perlin2d(float xx, float yy)
{
    
    int x = int(xx) & 511;
    int y = int(yy) & 511;
    float freqX = xx - int(xx);
    float freqY = yy - int(yy);  

    vec2 bottomLeft = vec2(freqX, freqY);
    vec2 bottomRight = vec2(freqX - 1.0f, freqY);
    vec2 topLeft = vec2(freqX, freqY - 1.0f);
    vec2 topRight = vec2(freqX - 1.0f, freqY - 1.0f);

    int cvBottomLeft = perms[perms[x] + y];
    int cvBottomRight = perms[perms[x + 1] + y];
    int cvTopLeft = perms[perms[x] + y + 1];
    int cvTopRight = perms[perms[x + 1] + y + 1];

    float dotBotL = dot(bottomLeft, GetConstVec(cvBottomLeft));
    float dotBotR = dot(bottomRight, GetConstVec(cvBottomRight));
    float dotTopL = dot(topLeft, GetConstVec(cvTopLeft));
    float dotTopR = dot(topRight, GetConstVec(cvTopRight));
        
    float u = Ease(freqX);
    float v = Ease(freqY);
    return (mix(    mix(dotBotL, dotTopL, v),  mix(dotBotR, dotTopR, v), u));

}

float fracBrownMotion(vec2 coords)
{

    int octaves = 8;
    float result = 0.0f;
    float gain = 0.5f;
    float freq = 1.0f;
    float amplitude = 1.0f;

    for(int i = 0; i < octaves; i++)
    {
        result += amplitude * (Perlin2d(coords.x * freq, coords.y * freq));
        freq *= 2.0f;
        amplitude *= gain;
    } 
    return (result + 1) / 2;
}

float domainWarp(vec2 coords)
{
    //return fracBrownMotion(coords);
    //the numbers to offset the brownian motion calls are arbitrary - we could use basically anything reasonably small (i.e. under 10 or so)
    vec2 warpedInput = vec2(fracBrownMotion(coords + vec2(6.6, 7.4)), fracBrownMotion(coords + vec2(0.5, 6.3)));

    //the multiplying component here appears to increase or decrease 'swirliness'
    float warpFactor = 3.0f;
    warpedInput = vec2(fracBrownMotion(coords + warpFactor * warpedInput + vec2(4.4,7.9)), fracBrownMotion(coords + warpFactor * warpedInput + vec2(2.0,8.4)));

    return fracBrownMotion(coords + warpFactor * warpedInput);
}

void main() 
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(image);

    float noise = domainWarp(texelCoord * 0.0025);
    vec4 colour = vec4(noise, noise,noise,1);

    imageStore(image, texelCoord, colour);
}